#!/bin/bash

# version
version="1.1.9"

# This function is from
# TrinityCoder/center_text_in_bash.md on Github
function print_centered {
	[[ $# == 0 ]] && return 1
	declare -i TERM_COLS="$(tput cols)"
	declare -i str_len="${#1}"
	[[ $str_len -ge $TERM_COLS ]] && {
		echo "$1"
		return 0
	}
	declare -i filler_len="$(((TERM_COLS - str_len) / 2))"
	[[ $# -ge 2 ]] && ch="${2:0:1}" || ch=" "
	filler=""
	for ((i = 0; i < filler_len; i++)); do
		filler="${filler}${ch}"
	done
	printf "%s%s%s" "$filler" "$1" "$filler"
	[[ $(((TERM_COLS - str_len) % 2)) -ne 0 ]] && printf "%s" "${ch}"
	printf "\n"
	return 0
}

# Function to check for updates
function check_for_updates {
	isTermux=$(echo $PREFIX | grep -o "com.termux")
	print_centered "checking for updates..."
	latest_version=$(curl -s https://raw.githubusercontent.com/MemerGamer/fetch-ke/main/fetch-ke | grep 'version=' | head -n 1 | cut -d '"' -f 2)
	if [[ "$latest_version" != "$version" ]]; then
		print_centered "new version available! updating..."
		print_centered "local version: $version"
		print_centered "|"
		print_centered "V"
		print_centered "latest version: $latest_version"
		if [[ -n $isTermux ]]; then
			curl -L https://raw.githubusercontent.com/MemerGamer/fetch-ke/main/fetch-ke -o $HOME/fetch-ke 2>/dev/null
			chmod +x $HOME/fetch-ke
		else
			curl -L https://raw.githubusercontent.com/MemerGamer/fetch-ke/main/fetch-ke -o /tmp/fetch-ke 2>/dev/null
			chmod +x /tmp/fetch-ke
			print_centered "please enter your sudo password to update: "
			sudo mv /tmp/fetch-ke /bin/fetch-ke
		fi
		print_centered "updated to version $latest_version"
	else
		print_centered "fetch-ke is up to date:)"
	fi
	exit 0
}

optc=
optb=
optB=
optF=

while getopts "bchvBFU" opt; do
	case $opt in
	b) optb="checked" ;;
	c) optc="checked" ;;
	h)
		print_centered "fetch-ke is a minimalistic, lightweight command-line system information tool written in bash"
		print_centered "." "."
		print_centered "options:"
		print_centered "-h | returns help message"
		print_centered "-B | disables battery information"
		print_centered "-F | disables figlet at start"
		print_centered "-b | disables long battery info"
		print_centered "-c | disables color output from fetch-ke"
		print_centered "-v | returns version of fetch-ke"
		print_centered "-U | checks for updates"
		exit 0
		;;
	v)
		print_centered "fetch-ke - $version"
		exit 0
		;;
	B) optB="checked" ;;
	F) optF="checked" ;;
	U) check_for_updates ;;
	\?)
		print_centered "You have to use [-h], [-b], [-c], [-B], [-F], [-v], or [-U] options"
		exit 1
		;;
	esac
done

# colors
WHITE="\e[97m"
RED="\e[31m"
YELLOW="\e[33m"
GREEN="\e[32m"
BLUE="\e[34m"
MAGENTA="\e[35m"
CYAN="\e[36m"
BLACK="\e[30m"
ENDCOLOR="\e[0m"

# uptime
puptime="$(uptime -p)"
puptime=${puptime:3}

# memory in GB
totalmem=$(free -m | awk '/Mem:/ {printf "%.2f", $2/1024}')
currmem=$(free -m | awk '/Mem:/ {printf "%.2f", $3/1024}')

isTermux=$(echo $PREFIX | grep -o "com.termux")

if [[ -z $isTermux ]]; then
	# distro name
	distro=$(hostnamectl | sed -n -e 's/^.*Operating System: //p')
	first_word_of_distro=$(echo $distro | head -n1 | sed -e 's/\s.*$//')

	battery_iterator=1
	# battery info
	if [[ -z $optB ]]; then
		battery_info=""
		for battery in $(upower -e | grep battery); do
			state=$(upower -i $battery | grep -E "state" | xargs)
			percentage=$(upower -i $battery | grep -E "percentage" | xargs)
			to_full_or_empty=$(upower -i $battery | grep -E "to (full|empty)" | xargs)
			battery_info+="$battery_iterator. battery: \n"
			[[ -n $state ]] && battery_info+="\t$state, \n"
			[[ -n $percentage ]] && battery_info+="\t$percentage, \n"
			[[ -n $to_full_or_empty ]] && battery_info+="\t$to_full_or_empty\n"
			battery_iterator=$((battery_iterator + 1))
		done
	fi

else
	androidVer=$(getprop ro.build.version.release)
	distro="Android $androidVer"
	first_word_of_distro="termux"

	# Termux battery info
	if [[ -z $optB ]]; then
		battery_info=$(termux-battery-status)
		percentage=$(echo $battery_info | jq '.percentage')
		status=$(echo $battery_info | jq -r '.status')
		temperature=$(echo $battery_info | jq '.temperature')
		battery_info="Status: $status\n\tPercentage: $percentage% \n\tTemperature: ${temperature}°C"
	fi
fi

if [[ -z $optF ]]; then
	figlet -w $(tput cols) -c "$first_word_of_distro"
fi

print_centered "user: $(whoami)"
if [[ -z $isTermux ]]; then
	print_centered "hname: $(hostnamectl --static)" # NOTE: this will only work if systemd is running
else
	print_centered "hname: $(hostname)"
fi
print_centered "distro: $distro"
print_centered "kernel: $(uname -r)"
print_centered "uptime: $puptime"
echo

if [[ -z $optB ]]; then
	if [[ -n $battery_info ]]; then
		if [[ -z $optb ]]; then
			print_centered "battery:"
			echo -e "$battery_info" | while read -r line; do
				[[ -n $line ]] && print_centered "·$line"
			done
		else
			echo -e "$battery_info" | while read -r line; do
				[[ -n $line ]] && print_centered "battery $line"
			done
		fi
		echo
	fi
fi

print_centered "shell: $(echo $SHELL)"
print_centered "processes: $(ps -e | wc -l)"
print_centered "memory: $currmem GiB | $totalmem GiB"
echo

if ! [[ -z $optc ]]; then
	echo
	exit 0
fi

print_centered "colors:"

# color list:
w=$(print_centered "·white")
r=$(print_centered "·red")
ye=$(print_centered "·yellow")
gr=$(print_centered "·green")
bl=$(print_centered "·blue")
mag=$(print_centered "·magenta")
cy=$(print_centered "·cyan")

echo -e "${WHITE}$w${ENDCOLOR}"
echo -e "${RED}$r${ENDCOLOR}"
echo -e "${YELLOW}$ye${ENDCOLOR}"
echo -e "${GREEN}$gr${ENDCOLOR}"
echo -e "${BLUE}$bl${ENDCOLOR}"
echo -e "${MAGENTA}$mag${ENDCOLOR}"
echo -e "${CYAN}$cy${ENDCOLOR}"
